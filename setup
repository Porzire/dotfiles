#!/bin/sh

# All the applications managed in this project. The defualt installation will
# link all the listed applications to the user root.
ALL="tmux vim"

SCRIPTPATH=$(pwd)
TIMESTAMP=$(date +%Y-%m-%d.%H-%M-%S)

# Print usage information.
#
usage() {
  cat <<EOM
  Usage: $(basename $0) [options] [app [...]]

  Options:
      -l, --link
          link dotfiles to the user root. (default true)
      -c, --copy
          copy dotfiles to the user root.
      -b, --backup
          backup the existing dotfiles. (default true)
      -o, --override
          override the existing dotfiles.
      -h, --help
          print the usage information.
EOM
  exit 0
}

install_vim() {
  #if [[ $(uname) == "Darwin" ]]; then
  #  echo "Hello, vim!"
  #fi
  vim +PluginInstall +qall
}

# Raise an error and exit the script.
#
# Arguments:
#   1. the error message
# Returns:
#   None
#
raise() {
  local msg=$1
  echo "Error: "${msg}
  exit 1
}

# Install the dotfiles of an application.
#
# Arguments:
#   1. the name of application
#   2. a boolean indicates the file handling behavior
#   3. a boolean indicates the duplication handling behavior
# Returns:
#   None
#
install() {
  local app=$1
  local link=$2
  local backup=$3

  # Install dotfiles to the user root.
  for file in $SCRIPTPATH/${app}/*; do
    local fname=$(basename ${file})
    if [[ -e "${HOME}/.${fname}" ]] && ${backup}; then
      mv ~/${fname} ~/${fname}.$TIMESTAMP
    fi
    if ${link}; then
      ln -Fs ${file} ~/.${fname}
    else
      cp -fa ${file} ~/.${fname}
    fi
  done
  # Execute application specific installation procedure.
  if [[ $(type -t install_${app}) == "function" ]]; then
    eval "install_"${app}
  fi
}

# Install the dotfiles.
#
main() {
  local apps=""
  local link=true
  local backup=true

  while [[ $# > 0 ]]; do
    local key=$1
    case ${key} in
      -h|--help)
        usage
        ;;
      -l|--link)
        link=true
        ;;
      -c|--copy)
        link=false
        ;;
      -o|--override)
        backup=false
        ;;
      -b|--backup)
        backup=true
        ;;
      -*)
        raise "illegal argement "${key}
        ;;
      *)
        apps+=' '${key}
        ;;
    esac
    shift
  done
  if [[ ${#apps} == 0 ]]; then
    apps="${ALL}"
  fi
  for app in ${apps}; do
    install ${app} ${link} ${backup}
  done
}

main "$@"
